/* tslint:disable */
/* eslint-disable */
/**
 * イベント管理システム API
 * イベント管理システムのRESTful API - DDD/CQRSアーキテクチャに基づく実装
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AssignRoleRequest
 */
export interface AssignRoleRequest {
    /**
     * 付与する役割名
     * @type {string}
     * @memberof AssignRoleRequest
     */
    'role_name': string;
}
/**
 * 
 * @export
 * @interface ConfirmEventScheduleRequest
 */
export interface ConfirmEventScheduleRequest {
    /**
     * 確定する日程
     * @type {string}
     * @memberof ConfirmEventScheduleRequest
     */
    'confirmed_date': string;
}
/**
 * 
 * @export
 * @interface CreateEventRequest
 */
export interface CreateEventRequest {
    /**
     * イベントタイトル
     * @type {string}
     * @memberof CreateEventRequest
     */
    'title': string;
    /**
     * イベントの説明
     * @type {string}
     * @memberof CreateEventRequest
     */
    'description'?: string;
    /**
     * 会場
     * @type {string}
     * @memberof CreateEventRequest
     */
    'venue'?: string;
    /**
     * 参加可能な役割
     * @type {Array<string>}
     * @memberof CreateEventRequest
     */
    'allowed_participation_roles': Array<string>;
    /**
     * 編集可能な役割
     * @type {Array<string>}
     * @memberof CreateEventRequest
     */
    'allowed_edit_roles': Array<string>;
    /**
     * タグ
     * @type {Array<string>}
     * @memberof CreateEventRequest
     */
    'tags'?: Array<string>;
    /**
     * 料金設定
     * @type {Array<FeeSetting>}
     * @memberof CreateEventRequest
     */
    'fee_settings'?: Array<FeeSetting>;
    /**
     * 日程調整タイプ
     * @type {string}
     * @memberof CreateEventRequest
     */
    'poll_type'?: string;
    /**
     * 日程候補（ISO 8601形式）
     * @type {Array<string>}
     * @memberof CreateEventRequest
     */
    'poll_candidates'?: Array<string>;
    /**
     * 確定した日程
     * @type {string}
     * @memberof CreateEventRequest
     */
    'confirmed_date'?: string;
    /**
     * 日程確定予定日
     * @type {string}
     * @memberof CreateEventRequest
     */
    'schedule_deadline'?: string;
}
/**
 * 
 * @export
 * @interface CreateEventResponse
 */
export interface CreateEventResponse {
    /**
     * 作成されたイベントのID
     * @type {string}
     * @memberof CreateEventResponse
     */
    'event_id': string;
}
/**
 * 
 * @export
 * @interface CreateRoleRequest
 */
export interface CreateRoleRequest {
    /**
     * 役割名
     * @type {string}
     * @memberof CreateRoleRequest
     */
    'name': string;
    /**
     * 役割の説明
     * @type {string}
     * @memberof CreateRoleRequest
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CreateTagRequest
 */
export interface CreateTagRequest {
    /**
     * タグ名
     * @type {string}
     * @memberof CreateTagRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface EventDetails
 */
export interface EventDetails {
    /**
     * イベントID
     * @type {string}
     * @memberof EventDetails
     */
    'event_id': string;
    /**
     * イベントタイトル
     * @type {string}
     * @memberof EventDetails
     */
    'title': string;
    /**
     * イベントの説明
     * @type {string}
     * @memberof EventDetails
     */
    'description'?: string;
    /**
     * イベントステータス
     * @type {string}
     * @memberof EventDetails
     */
    'status': EventDetailsStatusEnum;
    /**
     * 会場
     * @type {string}
     * @memberof EventDetails
     */
    'venue'?: string;
    /**
     * 参加可能な役割
     * @type {Array<string>}
     * @memberof EventDetails
     */
    'allowed_participation_roles'?: Array<string>;
    /**
     * 編集可能な役割
     * @type {Array<string>}
     * @memberof EventDetails
     */
    'allowed_edit_roles'?: Array<string>;
    /**
     * タグ
     * @type {Array<string>}
     * @memberof EventDetails
     */
    'tags'?: Array<string>;
    /**
     * 料金設定
     * @type {Array<FeeSetting>}
     * @memberof EventDetails
     */
    'fee_settings'?: Array<FeeSetting>;
    /**
     * 確定した日程
     * @type {string}
     * @memberof EventDetails
     */
    'confirmed_date'?: string;
    /**
     * 日程確定予定日
     * @type {string}
     * @memberof EventDetails
     */
    'schedule_deadline'?: string;
    /**
     * 主催者名
     * @type {string}
     * @memberof EventDetails
     */
    'organizer_name': string;
    /**
     * 作成日時
     * @type {string}
     * @memberof EventDetails
     */
    'created_at': string;
    /**
     * 更新日時
     * @type {string}
     * @memberof EventDetails
     */
    'updated_at': string;
}

export const EventDetailsStatusEnum = {
    SchedulePolling: 'SCHEDULE_POLLING',
    Confirmed: 'CONFIRMED',
    Finished: 'FINISHED',
    Cancelled: 'CANCELLED'
} as const;

export type EventDetailsStatusEnum = typeof EventDetailsStatusEnum[keyof typeof EventDetailsStatusEnum];

/**
 * 
 * @export
 * @interface EventParticipant
 */
export interface EventParticipant {
    /**
     * ユーザーID
     * @type {string}
     * @memberof EventParticipant
     */
    'user_id': string;
    /**
     * 世代（1-100の範囲）
     * @type {number}
     * @memberof EventParticipant
     */
    'generation': number;
    /**
     * 参加日時
     * @type {string}
     * @memberof EventParticipant
     */
    'joined_at': string;
    /**
     * 参加ステータス
     * @type {string}
     * @memberof EventParticipant
     */
    'status': EventParticipantStatusEnum;
}

export const EventParticipantStatusEnum = {
    Pending: 'PENDING',
    Confirmed: 'CONFIRMED',
    Cancelled: 'CANCELLED'
} as const;

export type EventParticipantStatusEnum = typeof EventParticipantStatusEnum[keyof typeof EventParticipantStatusEnum];

/**
 * 
 * @export
 * @interface EventSummary
 */
export interface EventSummary {
    /**
     * イベントID
     * @type {string}
     * @memberof EventSummary
     */
    'event_id': string;
    /**
     * イベントタイトル
     * @type {string}
     * @memberof EventSummary
     */
    'title': string;
    /**
     * イベントステータス
     * @type {string}
     * @memberof EventSummary
     */
    'status': EventSummaryStatusEnum;
    /**
     * 会場
     * @type {string}
     * @memberof EventSummary
     */
    'venue'?: string;
    /**
     * 主催者名
     * @type {string}
     * @memberof EventSummary
     */
    'organizer_name': string;
    /**
     * 参加可能な役割
     * @type {Array<string>}
     * @memberof EventSummary
     */
    'allowed_participation_roles'?: Array<string>;
    /**
     * タグ
     * @type {Array<string>}
     * @memberof EventSummary
     */
    'tags'?: Array<string>;
    /**
     * 確定した日程
     * @type {string}
     * @memberof EventSummary
     */
    'confirmed_date'?: string;
    /**
     * 日程確定予定日
     * @type {string}
     * @memberof EventSummary
     */
    'schedule_deadline'?: string;
    /**
     * 作成日時
     * @type {string}
     * @memberof EventSummary
     */
    'created_at': string;
}

export const EventSummaryStatusEnum = {
    SchedulePolling: 'SCHEDULE_POLLING',
    Confirmed: 'CONFIRMED',
    Finished: 'FINISHED',
    Cancelled: 'CANCELLED'
} as const;

export type EventSummaryStatusEnum = typeof EventSummaryStatusEnum[keyof typeof EventSummaryStatusEnum];

/**
 * 
 * @export
 * @interface FeeSetting
 */
export interface FeeSetting {
    /**
     * 適用世代（1-100の範囲）
     * @type {number}
     * @memberof FeeSetting
     */
    'applicable_generation': number;
    /**
     * 
     * @type {Money}
     * @memberof FeeSetting
     */
    'fee': Money;
}
/**
 * 
 * @export
 * @interface HealthCheck
 */
export interface HealthCheck {
    /**
     * サービス状態
     * @type {string}
     * @memberof HealthCheck
     */
    'status': HealthCheckStatusEnum;
}

export const HealthCheckStatusEnum = {
    Ok: 'ok',
    Error: 'error'
} as const;

export type HealthCheckStatusEnum = typeof HealthCheckStatusEnum[keyof typeof HealthCheckStatusEnum];

/**
 * 
 * @export
 * @interface JoinEventRequest
 */
export interface JoinEventRequest {
    /**
     * 参加するユーザーID
     * @type {string}
     * @memberof JoinEventRequest
     */
    'user_id': string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof ModelError
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface Money
 */
export interface Money {
    /**
     * 金額（最小単位）
     * @type {number}
     * @memberof Money
     */
    'amount': number;
    /**
     * 通貨コード
     * @type {string}
     * @memberof Money
     */
    'currency': string;
}
/**
 * 
 * @export
 * @interface PaginatedEventList
 */
export interface PaginatedEventList {
    /**
     * 
     * @type {Array<EventSummary>}
     * @memberof PaginatedEventList
     */
    'data': Array<EventSummary>;
    /**
     * 総件数
     * @type {number}
     * @memberof PaginatedEventList
     */
    'total_count': number;
    /**
     * 現在のページ番号
     * @type {number}
     * @memberof PaginatedEventList
     */
    'page': number;
    /**
     * 1ページあたりの件数
     * @type {number}
     * @memberof PaginatedEventList
     */
    'page_size': number;
}
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 役割名
     * @type {string}
     * @memberof Role
     */
    'name': string;
    /**
     * 役割の説明
     * @type {string}
     * @memberof Role
     */
    'description': string;
    /**
     * 作成日時
     * @type {string}
     * @memberof Role
     */
    'created_at': string;
    /**
     * 作成者ID
     * @type {string}
     * @memberof Role
     */
    'created_by': string;
}
/**
 * 
 * @export
 * @interface RoleDetails
 */
export interface RoleDetails {
    /**
     * 役割名
     * @type {string}
     * @memberof RoleDetails
     */
    'name': string;
    /**
     * 役割の説明
     * @type {string}
     * @memberof RoleDetails
     */
    'description': string;
    /**
     * 作成日時
     * @type {string}
     * @memberof RoleDetails
     */
    'created_at': string;
    /**
     * 作成者ID
     * @type {string}
     * @memberof RoleDetails
     */
    'created_by': string;
    /**
     * この役割を持つユーザー一覧
     * @type {Array<UserSummary>}
     * @memberof RoleDetails
     */
    'users': Array<UserSummary>;
}
/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * タグ名
     * @type {string}
     * @memberof Tag
     */
    'name': string;
    /**
     * 作成日時
     * @type {string}
     * @memberof Tag
     */
    'created_at': string;
    /**
     * 作成者ID
     * @type {string}
     * @memberof Tag
     */
    'created_by': string;
}
/**
 * 
 * @export
 * @interface UpdateEventRequest
 */
export interface UpdateEventRequest {
    /**
     * イベントタイトル
     * @type {string}
     * @memberof UpdateEventRequest
     */
    'title': string;
    /**
     * イベントの説明
     * @type {string}
     * @memberof UpdateEventRequest
     */
    'description'?: string;
    /**
     * 会場
     * @type {string}
     * @memberof UpdateEventRequest
     */
    'venue'?: string;
    /**
     * 参加可能な役割
     * @type {Array<string>}
     * @memberof UpdateEventRequest
     */
    'allowed_participation_roles': Array<string>;
    /**
     * 編集可能な役割
     * @type {Array<string>}
     * @memberof UpdateEventRequest
     */
    'allowed_edit_roles': Array<string>;
    /**
     * タグ
     * @type {Array<string>}
     * @memberof UpdateEventRequest
     */
    'tags'?: Array<string>;
    /**
     * 料金設定
     * @type {Array<FeeSetting>}
     * @memberof UpdateEventRequest
     */
    'fee_settings'?: Array<FeeSetting>;
    /**
     * 日程調整タイプ
     * @type {string}
     * @memberof UpdateEventRequest
     */
    'poll_type'?: UpdateEventRequestPollTypeEnum;
    /**
     * 日程候補（ISO 8601形式）
     * @type {Array<string>}
     * @memberof UpdateEventRequest
     */
    'poll_candidates'?: Array<string>;
    /**
     * 確定した日程
     * @type {string}
     * @memberof UpdateEventRequest
     */
    'confirmed_date'?: string;
    /**
     * 日程確定予定日
     * @type {string}
     * @memberof UpdateEventRequest
     */
    'schedule_deadline'?: string;
}

export const UpdateEventRequestPollTypeEnum = {
    SchedulePolling: 'SCHEDULE_POLLING',
    Confirmed: 'CONFIRMED'
} as const;

export type UpdateEventRequestPollTypeEnum = typeof UpdateEventRequestPollTypeEnum[keyof typeof UpdateEventRequestPollTypeEnum];

/**
 * 
 * @export
 * @interface UpdateRoleRequest
 */
export interface UpdateRoleRequest {
    /**
     * 役割の説明
     * @type {string}
     * @memberof UpdateRoleRequest
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * ユーザーID
     * @type {string}
     * @memberof User
     */
    'user_id': string;
    /**
     * ユーザーの役割リスト
     * @type {Array<string>}
     * @memberof User
     */
    'roles': Array<string>;
    /**
     * 世代（1-100の範囲）
     * @type {number}
     * @memberof User
     */
    'generation': number;
}
/**
 * 
 * @export
 * @interface UserSummary
 */
export interface UserSummary {
    /**
     * ユーザーID
     * @type {string}
     * @memberof UserSummary
     */
    'user_id': string;
    /**
     * 世代（1-100の範囲）
     * @type {number}
     * @memberof UserSummary
     */
    'generation': number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ユーザーに役割を付与
         * @param {string} userId 
         * @param {AssignRoleRequest} assignRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRoleToUser: async (userId: string, assignRoleRequest: AssignRoleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('assignRoleToUser', 'userId', userId)
            // verify required parameter 'assignRoleRequest' is not null or undefined
            assertParamExists('assignRoleToUser', 'assignRoleRequest', assignRoleRequest)
            const localVarPath = `/api/users/{user_id}/roles`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary イベントの日程を確定
         * @param {string} id 
         * @param {ConfirmEventScheduleRequest} confirmEventScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmEventSchedule: async (id: string, confirmEventScheduleRequest: ConfirmEventScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('confirmEventSchedule', 'id', id)
            // verify required parameter 'confirmEventScheduleRequest' is not null or undefined
            assertParamExists('confirmEventSchedule', 'confirmEventScheduleRequest', confirmEventScheduleRequest)
            const localVarPath = `/api/events/{id}/confirm-schedule`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(confirmEventScheduleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新しいイベントを作成
         * @param {CreateEventRequest} createEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent: async (createEventRequest: CreateEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEventRequest' is not null or undefined
            assertParamExists('createEvent', 'createEventRequest', createEventRequest)
            const localVarPath = `/api/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新しい役割を作成
         * @param {CreateRoleRequest} createRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: async (createRoleRequest: CreateRoleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRoleRequest' is not null or undefined
            assertParamExists('createRole', 'createRoleRequest', createRoleRequest)
            const localVarPath = `/api/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新しいタグを作成
         * @param {CreateTagRequest} createTagRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag: async (createTagRequest: CreateTagRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTagRequest' is not null or undefined
            assertParamExists('createTag', 'createTagRequest', createTagRequest)
            const localVarPath = `/api/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTagRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary イベントを削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvent: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEvent', 'id', id)
            const localVarPath = `/api/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 役割を削除
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (roleName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('deleteRole', 'roleName', roleName)
            const localVarPath = `/api/roles/{role_name}`
                .replace(`{${"role_name"}}`, encodeURIComponent(String(roleName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 現在のユーザー情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary イベント詳細を取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventDetails: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEventDetails', 'id', id)
            const localVarPath = `/api/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 役割詳細を取得
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleDetails: async (roleName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('getRoleDetails', 'roleName', roleName)
            const localVarPath = `/api/roles/{role_name}`
                .replace(`{${"role_name"}}`, encodeURIComponent(String(roleName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザー情報を取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary イベントに参加
         * @param {string} id 
         * @param {JoinEventRequest} joinEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinEvent: async (id: string, joinEventRequest: JoinEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('joinEvent', 'id', id)
            // verify required parameter 'joinEventRequest' is not null or undefined
            assertParamExists('joinEvent', 'joinEventRequest', joinEventRequest)
            const localVarPath = `/api/events/{id}/participants`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(joinEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary イベントから退出
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveEvent: async (id: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('leaveEvent', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('leaveEvent', 'userId', userId)
            const localVarPath = `/api/events/{id}/participants/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary イベント参加者一覧を取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventParticipants: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listEventParticipants', 'id', id)
            const localVarPath = `/api/events/{id}/participants`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary イベント一覧を取得
         * @param {number} [page] ページ番号
         * @param {number} [pageSize] 1ページあたりの件数
         * @param {'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED'} [status] イベントステータスでフィルタ
         * @param {string} [tags] タグでフィルタ（カンマ区切り）
         * @param {'all' | 'joinable' | 'joined'} [participation] 参加状況でフィルタ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents: async (page?: number, pageSize?: number, status?: 'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED', tags?: string, participation?: 'all' | 'joinable' | 'joined', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (participation !== undefined) {
                localVarQueryParameter['participation'] = participation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 利用可能な役割一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary タグ一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザー一覧を取得
         * @param {string} [role] 特定の役割を持つユーザーのみを取得
         * @param {string} [generation] 特定の世代のユーザーのみを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (role?: string, generation?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (generation !== undefined) {
                localVarQueryParameter['generation'] = generation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザーから役割を削除
         * @param {string} userId 
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromUser: async (userId: string, roleName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeRoleFromUser', 'userId', userId)
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('removeRoleFromUser', 'roleName', roleName)
            const localVarPath = `/api/users/{user_id}/roles`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleName !== undefined) {
                localVarQueryParameter['role_name'] = roleName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary イベントを更新
         * @param {string} id 
         * @param {UpdateEventRequest} updateEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvent: async (id: string, updateEventRequest: UpdateEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEvent', 'id', id)
            // verify required parameter 'updateEventRequest' is not null or undefined
            assertParamExists('updateEvent', 'updateEventRequest', updateEventRequest)
            const localVarPath = `/api/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 役割を更新
         * @param {string} roleName 
         * @param {UpdateRoleRequest} updateRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: async (roleName: string, updateRoleRequest: UpdateRoleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('updateRole', 'roleName', roleName)
            // verify required parameter 'updateRoleRequest' is not null or undefined
            assertParamExists('updateRole', 'updateRoleRequest', updateRoleRequest)
            const localVarPath = `/api/roles/{role_name}`
                .replace(`{${"role_name"}}`, encodeURIComponent(String(roleName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ユーザーに役割を付与
         * @param {string} userId 
         * @param {AssignRoleRequest} assignRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignRoleToUser(userId: string, assignRoleRequest: AssignRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignRoleToUser(userId, assignRoleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary イベントの日程を確定
         * @param {string} id 
         * @param {ConfirmEventScheduleRequest} confirmEventScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmEventSchedule(id: string, confirmEventScheduleRequest: ConfirmEventScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmEventSchedule(id, confirmEventScheduleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新しいイベントを作成
         * @param {CreateEventRequest} createEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEvent(createEventRequest: CreateEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEvent(createEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新しい役割を作成
         * @param {CreateRoleRequest} createRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(createRoleRequest: CreateRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(createRoleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新しいタグを作成
         * @param {CreateTagRequest} createTagRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTag(createTagRequest: CreateTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTag(createTagRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary イベントを削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEvent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEvent(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 役割を削除
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(roleName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(roleName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 現在のユーザー情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary イベント詳細を取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventDetails(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventDetails(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 役割詳細を取得
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleDetails(roleName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleDetails(roleName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ユーザー情報を取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthCheck>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary イベントに参加
         * @param {string} id 
         * @param {JoinEventRequest} joinEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinEvent(id: string, joinEventRequest: JoinEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventParticipant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinEvent(id, joinEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary イベントから退出
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaveEvent(id: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaveEvent(id, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary イベント参加者一覧を取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEventParticipants(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventParticipant>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEventParticipants(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary イベント一覧を取得
         * @param {number} [page] ページ番号
         * @param {number} [pageSize] 1ページあたりの件数
         * @param {'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED'} [status] イベントステータスでフィルタ
         * @param {string} [tags] タグでフィルタ（カンマ区切り）
         * @param {'all' | 'joinable' | 'joined'} [participation] 参加状況でフィルタ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEvents(page?: number, pageSize?: number, status?: 'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED', tags?: string, participation?: 'all' | 'joinable' | 'joined', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedEventList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEvents(page, pageSize, status, tags, participation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 利用可能な役割一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRoles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRoles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary タグ一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTags(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTags(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ユーザー一覧を取得
         * @param {string} [role] 特定の役割を持つユーザーのみを取得
         * @param {string} [generation] 特定の世代のユーザーのみを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(role?: string, generation?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserSummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(role, generation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ユーザーから役割を削除
         * @param {string} userId 
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeRoleFromUser(userId: string, roleName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeRoleFromUser(userId, roleName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary イベントを更新
         * @param {string} id 
         * @param {UpdateEventRequest} updateEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEvent(id: string, updateEventRequest: UpdateEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEvent(id, updateEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 役割を更新
         * @param {string} roleName 
         * @param {UpdateRoleRequest} updateRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole(roleName: string, updateRoleRequest: UpdateRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRole(roleName, updateRoleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary ユーザーに役割を付与
         * @param {string} userId 
         * @param {AssignRoleRequest} assignRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRoleToUser(userId: string, assignRoleRequest: AssignRoleRequest, options?: any): AxiosPromise<User> {
            return localVarFp.assignRoleToUser(userId, assignRoleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary イベントの日程を確定
         * @param {string} id 
         * @param {ConfirmEventScheduleRequest} confirmEventScheduleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmEventSchedule(id: string, confirmEventScheduleRequest: ConfirmEventScheduleRequest, options?: any): AxiosPromise<EventDetails> {
            return localVarFp.confirmEventSchedule(id, confirmEventScheduleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新しいイベントを作成
         * @param {CreateEventRequest} createEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent(createEventRequest: CreateEventRequest, options?: any): AxiosPromise<CreateEventResponse> {
            return localVarFp.createEvent(createEventRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新しい役割を作成
         * @param {CreateRoleRequest} createRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole(createRoleRequest: CreateRoleRequest, options?: any): AxiosPromise<Role> {
            return localVarFp.createRole(createRoleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新しいタグを作成
         * @param {CreateTagRequest} createTagRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag(createTagRequest: CreateTagRequest, options?: any): AxiosPromise<Tag> {
            return localVarFp.createTag(createTagRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary イベントを削除
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEvent(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteEvent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 役割を削除
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole(roleName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRole(roleName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 現在のユーザー情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: any): AxiosPromise<User> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary イベント詳細を取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventDetails(id: string, options?: any): AxiosPromise<EventDetails> {
            return localVarFp.getEventDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 役割詳細を取得
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleDetails(roleName: string, options?: any): AxiosPromise<RoleDetails> {
            return localVarFp.getRoleDetails(roleName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ユーザー情報を取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, options?: any): AxiosPromise<User> {
            return localVarFp.getUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: any): AxiosPromise<HealthCheck> {
            return localVarFp.healthCheck(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary イベントに参加
         * @param {string} id 
         * @param {JoinEventRequest} joinEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinEvent(id: string, joinEventRequest: JoinEventRequest, options?: any): AxiosPromise<EventParticipant> {
            return localVarFp.joinEvent(id, joinEventRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary イベントから退出
         * @param {string} id 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveEvent(id: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.leaveEvent(id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary イベント参加者一覧を取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEventParticipants(id: string, options?: any): AxiosPromise<Array<EventParticipant>> {
            return localVarFp.listEventParticipants(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary イベント一覧を取得
         * @param {number} [page] ページ番号
         * @param {number} [pageSize] 1ページあたりの件数
         * @param {'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED'} [status] イベントステータスでフィルタ
         * @param {string} [tags] タグでフィルタ（カンマ区切り）
         * @param {'all' | 'joinable' | 'joined'} [participation] 参加状況でフィルタ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents(page?: number, pageSize?: number, status?: 'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED', tags?: string, participation?: 'all' | 'joinable' | 'joined', options?: any): AxiosPromise<PaginatedEventList> {
            return localVarFp.listEvents(page, pageSize, status, tags, participation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 利用可能な役割一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles(options?: any): AxiosPromise<Array<Role>> {
            return localVarFp.listRoles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary タグ一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags(options?: any): AxiosPromise<Array<Tag>> {
            return localVarFp.listTags(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ユーザー一覧を取得
         * @param {string} [role] 特定の役割を持つユーザーのみを取得
         * @param {string} [generation] 特定の世代のユーザーのみを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(role?: string, generation?: string, options?: any): AxiosPromise<Array<UserSummary>> {
            return localVarFp.listUsers(role, generation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ユーザーから役割を削除
         * @param {string} userId 
         * @param {string} roleName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRoleFromUser(userId: string, roleName: string, options?: any): AxiosPromise<User> {
            return localVarFp.removeRoleFromUser(userId, roleName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary イベントを更新
         * @param {string} id 
         * @param {UpdateEventRequest} updateEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEvent(id: string, updateEventRequest: UpdateEventRequest, options?: any): AxiosPromise<EventDetails> {
            return localVarFp.updateEvent(id, updateEventRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 役割を更新
         * @param {string} roleName 
         * @param {UpdateRoleRequest} updateRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole(roleName: string, updateRoleRequest: UpdateRoleRequest, options?: any): AxiosPromise<Role> {
            return localVarFp.updateRole(roleName, updateRoleRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary ユーザーに役割を付与
     * @param {string} userId 
     * @param {AssignRoleRequest} assignRoleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    assignRoleToUser(userId: string, assignRoleRequest: AssignRoleRequest, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @summary イベントの日程を確定
     * @param {string} id 
     * @param {ConfirmEventScheduleRequest} confirmEventScheduleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    confirmEventSchedule(id: string, confirmEventScheduleRequest: ConfirmEventScheduleRequest, options?: AxiosRequestConfig): AxiosPromise<EventDetails>;

    /**
     * 
     * @summary 新しいイベントを作成
     * @param {CreateEventRequest} createEventRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createEvent(createEventRequest: CreateEventRequest, options?: AxiosRequestConfig): AxiosPromise<CreateEventResponse>;

    /**
     * 
     * @summary 新しい役割を作成
     * @param {CreateRoleRequest} createRoleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createRole(createRoleRequest: CreateRoleRequest, options?: AxiosRequestConfig): AxiosPromise<Role>;

    /**
     * 
     * @summary 新しいタグを作成
     * @param {CreateTagRequest} createTagRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createTag(createTagRequest: CreateTagRequest, options?: AxiosRequestConfig): AxiosPromise<Tag>;

    /**
     * 
     * @summary イベントを削除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteEvent(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 役割を削除
     * @param {string} roleName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteRole(roleName: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 現在のユーザー情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCurrentUser(options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @summary イベント詳細を取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getEventDetails(id: string, options?: AxiosRequestConfig): AxiosPromise<EventDetails>;

    /**
     * 
     * @summary 役割詳細を取得
     * @param {string} roleName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRoleDetails(roleName: string, options?: AxiosRequestConfig): AxiosPromise<RoleDetails>;

    /**
     * 
     * @summary ユーザー情報を取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUser(id: string, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @summary ヘルスチェック
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    healthCheck(options?: AxiosRequestConfig): AxiosPromise<HealthCheck>;

    /**
     * 
     * @summary イベントに参加
     * @param {string} id 
     * @param {JoinEventRequest} joinEventRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    joinEvent(id: string, joinEventRequest: JoinEventRequest, options?: AxiosRequestConfig): AxiosPromise<EventParticipant>;

    /**
     * 
     * @summary イベントから退出
     * @param {string} id 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    leaveEvent(id: string, userId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary イベント参加者一覧を取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listEventParticipants(id: string, options?: AxiosRequestConfig): AxiosPromise<Array<EventParticipant>>;

    /**
     * 
     * @summary イベント一覧を取得
     * @param {number} [page] ページ番号
     * @param {number} [pageSize] 1ページあたりの件数
     * @param {'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED'} [status] イベントステータスでフィルタ
     * @param {string} [tags] タグでフィルタ（カンマ区切り）
     * @param {'all' | 'joinable' | 'joined'} [participation] 参加状況でフィルタ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listEvents(page?: number, pageSize?: number, status?: 'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED', tags?: string, participation?: 'all' | 'joinable' | 'joined', options?: AxiosRequestConfig): AxiosPromise<PaginatedEventList>;

    /**
     * 
     * @summary 利用可能な役割一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listRoles(options?: AxiosRequestConfig): AxiosPromise<Array<Role>>;

    /**
     * 
     * @summary タグ一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listTags(options?: AxiosRequestConfig): AxiosPromise<Array<Tag>>;

    /**
     * 
     * @summary ユーザー一覧を取得
     * @param {string} [role] 特定の役割を持つユーザーのみを取得
     * @param {string} [generation] 特定の世代のユーザーのみを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listUsers(role?: string, generation?: string, options?: AxiosRequestConfig): AxiosPromise<Array<UserSummary>>;

    /**
     * 
     * @summary ユーザーから役割を削除
     * @param {string} userId 
     * @param {string} roleName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    removeRoleFromUser(userId: string, roleName: string, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @summary イベントを更新
     * @param {string} id 
     * @param {UpdateEventRequest} updateEventRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateEvent(id: string, updateEventRequest: UpdateEventRequest, options?: AxiosRequestConfig): AxiosPromise<EventDetails>;

    /**
     * 
     * @summary 役割を更新
     * @param {string} roleName 
     * @param {UpdateRoleRequest} updateRoleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateRole(roleName: string, updateRoleRequest: UpdateRoleRequest, options?: AxiosRequestConfig): AxiosPromise<Role>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary ユーザーに役割を付与
     * @param {string} userId 
     * @param {AssignRoleRequest} assignRoleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public assignRoleToUser(userId: string, assignRoleRequest: AssignRoleRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).assignRoleToUser(userId, assignRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary イベントの日程を確定
     * @param {string} id 
     * @param {ConfirmEventScheduleRequest} confirmEventScheduleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public confirmEventSchedule(id: string, confirmEventScheduleRequest: ConfirmEventScheduleRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).confirmEventSchedule(id, confirmEventScheduleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新しいイベントを作成
     * @param {CreateEventRequest} createEventRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createEvent(createEventRequest: CreateEventRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createEvent(createEventRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新しい役割を作成
     * @param {CreateRoleRequest} createRoleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createRole(createRoleRequest: CreateRoleRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createRole(createRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新しいタグを作成
     * @param {CreateTagRequest} createTagRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTag(createTagRequest: CreateTagRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createTag(createTagRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary イベントを削除
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteEvent(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteEvent(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 役割を削除
     * @param {string} roleName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRole(roleName: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteRole(roleName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 現在のユーザー情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCurrentUser(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary イベント詳細を取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEventDetails(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEventDetails(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 役割詳細を取得
     * @param {string} roleName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRoleDetails(roleName: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRoleDetails(roleName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ユーザー情報を取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ヘルスチェック
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheck(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheck(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary イベントに参加
     * @param {string} id 
     * @param {JoinEventRequest} joinEventRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public joinEvent(id: string, joinEventRequest: JoinEventRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).joinEvent(id, joinEventRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary イベントから退出
     * @param {string} id 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public leaveEvent(id: string, userId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).leaveEvent(id, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary イベント参加者一覧を取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listEventParticipants(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listEventParticipants(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary イベント一覧を取得
     * @param {number} [page] ページ番号
     * @param {number} [pageSize] 1ページあたりの件数
     * @param {'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED'} [status] イベントステータスでフィルタ
     * @param {string} [tags] タグでフィルタ（カンマ区切り）
     * @param {'all' | 'joinable' | 'joined'} [participation] 参加状況でフィルタ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listEvents(page?: number, pageSize?: number, status?: 'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED', tags?: string, participation?: 'all' | 'joinable' | 'joined', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listEvents(page, pageSize, status, tags, participation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 利用可能な役割一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listRoles(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listRoles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary タグ一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTags(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listTags(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ユーザー一覧を取得
     * @param {string} [role] 特定の役割を持つユーザーのみを取得
     * @param {string} [generation] 特定の世代のユーザーのみを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listUsers(role?: string, generation?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listUsers(role, generation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ユーザーから役割を削除
     * @param {string} userId 
     * @param {string} roleName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public removeRoleFromUser(userId: string, roleName: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).removeRoleFromUser(userId, roleName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary イベントを更新
     * @param {string} id 
     * @param {UpdateEventRequest} updateEventRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateEvent(id: string, updateEventRequest: UpdateEventRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateEvent(id, updateEventRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 役割を更新
     * @param {string} roleName 
     * @param {UpdateRoleRequest} updateRoleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateRole(roleName: string, updateRoleRequest: UpdateRoleRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateRole(roleName, updateRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


