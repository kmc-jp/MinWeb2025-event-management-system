/* tslint:disable */
/* eslint-disable */
/**
 * イベント管理システム API
 * イベント管理システムのRESTful API - DDD/CQRSアーキテクチャに基づく実装
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dev@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateEventRequest
 */
export interface CreateEventRequest {
    /**
     * イベントタイトル
     * @type {string}
     * @memberof CreateEventRequest
     */
    'title': string;
    /**
     * イベントの説明
     * @type {string}
     * @memberof CreateEventRequest
     */
    'description'?: string;
    /**
     * 会場
     * @type {string}
     * @memberof CreateEventRequest
     */
    'venue'?: string;
    /**
     * 参加可能な役割
     * @type {Array<UserRole>}
     * @memberof CreateEventRequest
     */
    'allowed_roles': Array<UserRole>;
    /**
     * タグ
     * @type {Array<string>}
     * @memberof CreateEventRequest
     */
    'tags'?: Array<string>;
    /**
     * 料金設定
     * @type {Array<FeeSetting>}
     * @memberof CreateEventRequest
     */
    'fee_settings'?: Array<FeeSetting>;
    /**
     * 日程調整タイプ
     * @type {string}
     * @memberof CreateEventRequest
     */
    'poll_type'?: string;
    /**
     * 日程候補（ISO 8601形式）
     * @type {Array<string>}
     * @memberof CreateEventRequest
     */
    'poll_candidates'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateEventResponse
 */
export interface CreateEventResponse {
    /**
     * 作成されたイベントのID
     * @type {string}
     * @memberof CreateEventResponse
     */
    'event_id': string;
}
/**
 * 
 * @export
 * @interface EventDetails
 */
export interface EventDetails {
    /**
     * イベントID
     * @type {string}
     * @memberof EventDetails
     */
    'event_id': string;
    /**
     * イベントタイトル
     * @type {string}
     * @memberof EventDetails
     */
    'title': string;
    /**
     * イベントの説明
     * @type {string}
     * @memberof EventDetails
     */
    'description'?: string;
    /**
     * イベントステータス
     * @type {string}
     * @memberof EventDetails
     */
    'status': EventDetailsStatusEnum;
    /**
     * 会場
     * @type {string}
     * @memberof EventDetails
     */
    'venue'?: string;
    /**
     * 参加可能な役割
     * @type {Array<UserRole>}
     * @memberof EventDetails
     */
    'allowed_roles'?: Array<UserRole>;
    /**
     * タグ
     * @type {Array<string>}
     * @memberof EventDetails
     */
    'tags'?: Array<string>;
    /**
     * 料金設定
     * @type {Array<FeeSetting>}
     * @memberof EventDetails
     */
    'fee_settings'?: Array<FeeSetting>;
    /**
     * 主催者名
     * @type {string}
     * @memberof EventDetails
     */
    'organizer_name': string;
    /**
     * 作成日時
     * @type {string}
     * @memberof EventDetails
     */
    'created_at': string;
    /**
     * 更新日時
     * @type {string}
     * @memberof EventDetails
     */
    'updated_at': string;
}

export const EventDetailsStatusEnum = {
    Draft: 'DRAFT',
    SchedulePolling: 'SCHEDULE_POLLING',
    Confirmed: 'CONFIRMED',
    Finished: 'FINISHED',
    Cancelled: 'CANCELLED'
} as const;

export type EventDetailsStatusEnum = typeof EventDetailsStatusEnum[keyof typeof EventDetailsStatusEnum];

/**
 * 
 * @export
 * @interface EventSummary
 */
export interface EventSummary {
    /**
     * イベントID
     * @type {string}
     * @memberof EventSummary
     */
    'event_id': string;
    /**
     * イベントタイトル
     * @type {string}
     * @memberof EventSummary
     */
    'title': string;
    /**
     * イベントステータス
     * @type {string}
     * @memberof EventSummary
     */
    'status': EventSummaryStatusEnum;
    /**
     * 会場
     * @type {string}
     * @memberof EventSummary
     */
    'venue'?: string;
    /**
     * 主催者名
     * @type {string}
     * @memberof EventSummary
     */
    'organizer_name': string;
    /**
     * 作成日時
     * @type {string}
     * @memberof EventSummary
     */
    'created_at': string;
}

export const EventSummaryStatusEnum = {
    Draft: 'DRAFT',
    SchedulePolling: 'SCHEDULE_POLLING',
    Confirmed: 'CONFIRMED',
    Finished: 'FINISHED',
    Cancelled: 'CANCELLED'
} as const;

export type EventSummaryStatusEnum = typeof EventSummaryStatusEnum[keyof typeof EventSummaryStatusEnum];

/**
 * 
 * @export
 * @interface FeeSetting
 */
export interface FeeSetting {
    /**
     * 
     * @type {UserRole}
     * @memberof FeeSetting
     */
    'applicable_role': UserRole;
    /**
     * 適用世代
     * @type {string}
     * @memberof FeeSetting
     */
    'applicable_generation'?: string;
    /**
     * 
     * @type {Money}
     * @memberof FeeSetting
     */
    'fee': Money;
}


/**
 * 
 * @export
 * @interface HealthCheck
 */
export interface HealthCheck {
    /**
     * サービス状態
     * @type {string}
     * @memberof HealthCheck
     */
    'status': HealthCheckStatusEnum;
}

export const HealthCheckStatusEnum = {
    Ok: 'ok',
    Error: 'error'
} as const;

export type HealthCheckStatusEnum = typeof HealthCheckStatusEnum[keyof typeof HealthCheckStatusEnum];

/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof ModelError
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface Money
 */
export interface Money {
    /**
     * 金額（最小単位）
     * @type {number}
     * @memberof Money
     */
    'amount': number;
    /**
     * 通貨コード
     * @type {string}
     * @memberof Money
     */
    'currency': string;
}
/**
 * 
 * @export
 * @interface PaginatedEventList
 */
export interface PaginatedEventList {
    /**
     * 
     * @type {Array<EventSummary>}
     * @memberof PaginatedEventList
     */
    'data': Array<EventSummary>;
    /**
     * 総件数
     * @type {number}
     * @memberof PaginatedEventList
     */
    'total_count': number;
    /**
     * 現在のページ番号
     * @type {number}
     * @memberof PaginatedEventList
     */
    'page': number;
    /**
     * 1ページあたりの件数
     * @type {number}
     * @memberof PaginatedEventList
     */
    'page_size': number;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * ユーザーID
     * @type {string}
     * @memberof User
     */
    'user_id': string;
    /**
     * ユーザー名
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * 
     * @type {UserRole}
     * @memberof User
     */
    'role': UserRole;
    /**
     * 世代（例 \"2023\", \"2024\"）
     * @type {string}
     * @memberof User
     */
    'generation': string;
}


/**
 * ユーザーの役割
 * @export
 * @enum {string}
 */

export const UserRole = {
    CircleAdmin: 'CircleAdmin',
    RegularMember: 'RegularMember',
    Alumni: 'Alumni',
    External: 'External'
} as const;

export type UserRole = typeof UserRole[keyof typeof UserRole];



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 新しいイベントを作成
         * @param {CreateEventRequest} createEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent: async (createEventRequest: CreateEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEventRequest' is not null or undefined
            assertParamExists('createEvent', 'createEventRequest', createEventRequest)
            const localVarPath = `/api/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 現在のユーザー情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary イベント詳細を取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventDetails: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEventDetails', 'id', id)
            const localVarPath = `/api/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザー情報を取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary イベント一覧を取得
         * @param {number} [page] ページ番号
         * @param {number} [pageSize] 1ページあたりの件数
         * @param {'DRAFT' | 'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED'} [status] イベントステータスでフィルタ
         * @param {string} [tags] タグでフィルタ（カンマ区切り）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents: async (page?: number, pageSize?: number, status?: 'DRAFT' | 'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED', tags?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 新しいイベントを作成
         * @param {CreateEventRequest} createEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEvent(createEventRequest: CreateEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEvent(createEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 現在のユーザー情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary イベント詳細を取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventDetails(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventDetails(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ユーザー情報を取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthCheck>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary イベント一覧を取得
         * @param {number} [page] ページ番号
         * @param {number} [pageSize] 1ページあたりの件数
         * @param {'DRAFT' | 'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED'} [status] イベントステータスでフィルタ
         * @param {string} [tags] タグでフィルタ（カンマ区切り）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEvents(page?: number, pageSize?: number, status?: 'DRAFT' | 'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED', tags?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedEventList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEvents(page, pageSize, status, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 新しいイベントを作成
         * @param {CreateEventRequest} createEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent(createEventRequest: CreateEventRequest, options?: any): AxiosPromise<CreateEventResponse> {
            return localVarFp.createEvent(createEventRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 現在のユーザー情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: any): AxiosPromise<User> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary イベント詳細を取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventDetails(id: string, options?: any): AxiosPromise<EventDetails> {
            return localVarFp.getEventDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ユーザー情報を取得
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, options?: any): AxiosPromise<User> {
            return localVarFp.getUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ヘルスチェック
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: any): AxiosPromise<HealthCheck> {
            return localVarFp.healthCheck(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary イベント一覧を取得
         * @param {number} [page] ページ番号
         * @param {number} [pageSize] 1ページあたりの件数
         * @param {'DRAFT' | 'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED'} [status] イベントステータスでフィルタ
         * @param {string} [tags] タグでフィルタ（カンマ区切り）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents(page?: number, pageSize?: number, status?: 'DRAFT' | 'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED', tags?: string, options?: any): AxiosPromise<PaginatedEventList> {
            return localVarFp.listEvents(page, pageSize, status, tags, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary 新しいイベントを作成
     * @param {CreateEventRequest} createEventRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createEvent(createEventRequest: CreateEventRequest, options?: AxiosRequestConfig): AxiosPromise<CreateEventResponse>;

    /**
     * 
     * @summary 現在のユーザー情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCurrentUser(options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @summary イベント詳細を取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getEventDetails(id: string, options?: AxiosRequestConfig): AxiosPromise<EventDetails>;

    /**
     * 
     * @summary ユーザー情報を取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUser(id: string, options?: AxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @summary ヘルスチェック
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    healthCheck(options?: AxiosRequestConfig): AxiosPromise<HealthCheck>;

    /**
     * 
     * @summary イベント一覧を取得
     * @param {number} [page] ページ番号
     * @param {number} [pageSize] 1ページあたりの件数
     * @param {'DRAFT' | 'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED'} [status] イベントステータスでフィルタ
     * @param {string} [tags] タグでフィルタ（カンマ区切り）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    listEvents(page?: number, pageSize?: number, status?: 'DRAFT' | 'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED', tags?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedEventList>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary 新しいイベントを作成
     * @param {CreateEventRequest} createEventRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createEvent(createEventRequest: CreateEventRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createEvent(createEventRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 現在のユーザー情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCurrentUser(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary イベント詳細を取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEventDetails(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEventDetails(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ユーザー情報を取得
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ヘルスチェック
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheck(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheck(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary イベント一覧を取得
     * @param {number} [page] ページ番号
     * @param {number} [pageSize] 1ページあたりの件数
     * @param {'DRAFT' | 'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED'} [status] イベントステータスでフィルタ
     * @param {string} [tags] タグでフィルタ（カンマ区切り）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listEvents(page?: number, pageSize?: number, status?: 'DRAFT' | 'SCHEDULE_POLLING' | 'CONFIRMED' | 'FINISHED' | 'CANCELLED', tags?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listEvents(page, pageSize, status, tags, options).then((request) => request(this.axios, this.basePath));
    }
}


